import { doc, onSnapshot, FirestoreError, Unsubscribe } from "firebase/firestore";
import { db } from "../{{#each parents}}../{{/each}}firebase";
import { EntityGet, EntityServerGet, OnSnapshotDocService } from "../{{#each parents}}../{{/each}}types";
import { {{entityInterface}} } from "./types";
import { transformMetadata, processTimestampFields } from '../{{#each parents}}../{{/each}}utils';

export type {{entityInterface}}OnSnapshotDocService<T> = ({{> typedSubcollectionParams}}id: string, callback: (doc: T) => void, onError?: (error: FirestoreError) => void) => Unsubscribe;


const onSnapshotDoc: {{entityInterface}}OnSnapshotDocService<EntityGet<{{entityInterface}}>> = ({{> subcollectionParams}}id, callback, onError) => {
  const docRef = doc(db, `{{> subcollectionPath}}/{{entityName}}/${id}`);
  return onSnapshot(
    docRef,
    (docSnap) => {
      if (docSnap.exists()) {
        callback(
          processTimestampFields(transformMetadata({
            ...docSnap.data(),
            id: docSnap.id,
          } as EntityServerGet<{{entityInterface}}>, docSnap.metadata)) as EntityGet<{{entityInterface}}>,
        );
      }
    },
    onError
  );
};

export default onSnapshotDoc;
