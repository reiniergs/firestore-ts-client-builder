import { db } from "../{{#each parents}}../{{/each}}admin";
import { GetService, EntityGet, EntityServerGet  } from "../{{#each parents}}../{{/each}}types";
import { transformMetadata, processTimestampFields } from '../{{#each parents}}../{{/each}}utils';
import { {{entityInterface}} } from "./types";

export type {{entityInterface}}GetService<T> = ({{> typedSubcollectionParams }} id: string) => Promise<T | null>;


const get: {{entityInterface}}GetService<EntityGet<{{entityInterface}}>> = async ({{> subcollectionParams}} id: string) => {
  const docRef = db.doc(`{{> subcollectionPath}}/{{entityName}}/${id}`);
  const docSnap = await docRef.get();
  if (docSnap.exists) {
    return processTimestampFields(transformMetadata({
        ...docSnap.data(),
      id: docSnap.id,
    } as EntityServerGet<{{entityInterface}}>)) as EntityGet<{{entityInterface}}>;
  }
  return null;
};

export default get;
