import { db } from "../{{#each parents}}../{{/each}}admin";
import { ListServiceOpts, EntityGet, EntityServerGet } from "../{{#each parents}}../{{/each}}types";
import { transformMetadata, processTimestampFields } from '../{{#each parents}}../{{/each}}utils';
import { {{entityInterface}} } from "./types";

export type {{entityInterface}}ListService<T> = ({{> typedSubcollectionParams}} opts?: ListServiceOpts) => Promise<Array<T>>;


const list: {{entityInterface}}ListService<EntityGet<{{entityInterface}}>> = async ({{> subcollectionParams}} opts = {}) => {
  const collectionRef = db.collection(`{{> subcollectionPath}}/{{entityName}}`);
  const q =
    typeof opts.listQueryFn === "function"
      ? opts.listQueryFn(collectionRef)
      : collectionRef;
  const querySnapshot = await q.get();
  return querySnapshot.docs.map((doc) => {
    return processTimestampFields(transformMetadata({
        ...doc.data(),
        id: doc.id,
    } as EntityServerGet<{{entityInterface}}>)) as EntityGet<{{entityInterface}}>;
  });
};

export default list;
