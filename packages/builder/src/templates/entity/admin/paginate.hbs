import { db } from "../{{#each parents}}../{{/each}}admin";
import { PaginateServiceOpts, EntityGet, EntityServerGet, Page } from '../{{#each parents}}../{{/each}}types';
import { transformMetadata, processTimestampFields } from '../{{#each parents}}../{{/each}}utils';
import { {{entityInterface}} } from "./types";

export type {{entityInterface}}PaginateService<T> = ({{> typedSubcollectionParams}}opts: PaginateServiceOpts) => Promise<Page<T>>;


const paginate: {{entityInterface}}PaginateService<{{entityInterface}}> = async ({{> subcollectionParams}}{
  direction = "forward",
  limit = 25,
  cursor,
  listQueryFn,
} = {}) => {
  const cursorDoc = cursor ? await db.doc(`{{> subcollectionPath}}/{{entityName}}/${cursor}`).get() : null;
  if (cursorDoc && !cursorDoc.exists) {
    throw new Error("Invalid cursor");
  }

  const collectionRef = db.collection(`{{> subcollectionPath}}/{{entityName}}`);
  let q =
    typeof listQueryFn === "function"
      ? listQueryFn(collectionRef)
      : collectionRef;

  if (direction === "forward") {
    if (cursorDoc) {
      q = q.startAfter(cursorDoc).limit(limit);
    } else {
      q = q.limit(limit);
    }
  } else {
    if (cursorDoc) {
      q = q.endBefore(cursorDoc).limitToLast(limit);
    } else {
      q = q.limitToLast(limit);
    }
  }

  const querySnapshot = await q.get();
  const docs = querySnapshot.docs.map((doc) => {
    return processTimestampFields(transformMetadata({
      ...doc.data(),
      id: doc.id,
    } as EntityServerGet<{{entityInterface}}>)) as EntityGet<{{entityInterface}}>;
  });
  return {
    docs,
    count: docs.length,
    firstDocId: docs.length > 0 ? docs[0].id : null,
    lastDocId: docs.length > 0 ? docs[docs.length - 1].id : null,
  };
};

export default paginate;
